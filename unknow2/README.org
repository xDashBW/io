# dispatch-queue-mode

* 邪恶基因
- 如何学习就是是如何合理分配时间，合理分配资源的策略。而我要把这个策略具体化
    - 背景

      脱离了高中后，我大学的前面 3 年，都处于一种低效的自学模式。

      经常感觉时间不够用，怎么这个还没有学完，另一门科目就要考试了？我把整本 《C++ Primer》都啃完了，但是考 c++ 还是拉垮，这是为啥？

      同时我观察很多同学，包括考第一名的学委，考试很行，但是也就考试还行。而且一旦脱离了考试的范围，或者换个出题老师，基本 gg。

      所以，我思考，造成这些问题的原因是啥？那到底怎么才算是学习？怎么样才算是真的学会？
      
    - 思考的结果 - 学习应该是实践驱动的

      什么是学习，那提高自身的生产力，用于实践。实践可以是考试，为老板创造价值，贡献社会等。

      也就是说，学习是需要结合实际的，为具体实践服务的。你不能假设自己的时间无限，精力无限，像武侠小说一样，闭关钻研个几年成为高手，天下武学尽在掌握，这是不现实的。

      学习是如何合理分配时间，合理分配资源的一种策略。用一个成语形容，那就是 '以战养战‘。
      
      当你接手一个限时 1 个月 C++ 任务时，你不懂 C++ 。那么你该听从知乎大神的建议去读一本 《C++ Primer》？ 还是读一本轻薄的《Essential C++》？ 如果选择的是前者，不妨思考，就算把 《C++ Primer》啃完了，就真的学会 C++ 吗？ 

      知识是永远也学不完的，但是对于这个任务而言，怎么合理安排时间是更加重要的事情，有的任务需要你达到 80% 的水平，而有的任务只需要 60% 的水平，但是有时间限制。
      
- 现有的 Org-mode 太过于复杂

  我使用了两个月的 org-agenda 作为 gtd 工具，我感慨他的强大，但是带给我巨大的心智负担。

    1. 过于灵活，我没有找到一种统一的最佳实践，他就像把食材给你，但是怎么炒，没有教你。以至于用法五花八门，你也不知道是不是适合自己，就套着用。

    2. 太多看起来很有用的功能，但是实际没有啥用，反而给我带来很多无用干扰信息

    3. GTD 看起来很美好，实际没有啥用。
       
- 对 org-mode 进行减法
  
    - 只有一种，唯一的最佳实践，没有多余用法，增加心智负担

    - 简单，只提供必要的信息

    - 自动任务调度

      
* 需求分析：
  - 调度队列
    
    同时激活多个任务，放入队列里，那么任务什么时候完成，什么时候加入新的任务，如果新任务的优先级更高（更加紧急），要把队列里某个任务取出。

  - 以建立知识库为核心

    不少使用者，是根据时间线来叙述的
    #+begin_src org
      ,* TODO 2022.11.26
      ,** TODO A 
      ,** TODO B
      ,* TODO 2022.11.27
    #+end_src

    正确的思路是
    #+begin_src org
      ,* TODO Python
      ,** TODO Python 网络编程
      SCHEDULED: <2022.11.26>
       - [ ] aiohttp
         xxoo
       - [ ] async/await
         xxoo
      ,** TODO Python 数据库
      SCHEDULED: <2022.11.27>
    #+end_src

    这样做的好处很多，方便再次规划新任务，方便重新调整，例如你很容易就发现，python 网络编程还有有一个新子任务，Selector 基础，你可以添加上去，即时你现在没空学，但是日后，你很容易发现有个 todo 没有做。
    
  - 使用不同文件划分不同的场景，且有一个核心 base 文件进行同步
    
      - school.org

        针对学校任务。例如学校考试，主要是靠看老师的题库，根据学校所用教科书的思路，有种学文科的感觉
            
      - company.org

        针对公司任务
        
      - base.org

        核心知识

        规划时间，把不同任务所学的知识点，整理，同步到这里，作为核心的知识库。

        当遇到一个新任务，先复习 base.org, 从里面的知识点为基础，增加自己下一次的学习速度。或者参考上次任务的学习经验。
        
        不管是学校考试，还是公司任务，还是平时看书，总是有核心的共通点，例如计算机网络，只是需要理解范围不同，例如学校考试主要是背诵概念，公司后端主要理解 tcp ，平时看书也陆陆续续学到了不少新东西，那就把他们总结下吧。
        
  - 要分配任务并且记录用时，起到指导的作用，而不是按照心情做完某事，打个时间戳。
    
    打几个时间戳，记录今天多少点做了什么，在我看来，除了让自己感动，没有啥意义

  - 多线程：同时做多件事情
    
    研究证明，单线程模式的学习效率比多线程差的远了。

    而且不仅是学习效率的角度，从长远的角度，多线程非常重要。当你很忙的时候，能够把零碎时间挤出来，去做其余任务，并且能够 tag 进度，花时间总结，别小看每天那么丁点时间，坚持下来会产生质变


 org-mode 的简化
: Org-mode 的 feature 真的都有用吗？怎么组合用最简单，效率最高呢？

  - 不要什么都 TODO, 而是只做超长时间的学习任务
    
    不要什么鸡毛蒜皮小事，例如多少点开会，多少点交表都打个 TODO 标签，这叫什么，脱下裤子放屁，还污染了知识库。

  - 只有三种状态，WAIT, ACTIVITY, DONE

    我看博客看到很多使用者设置了各种状态，有那么多状态，肯定势必分了很多短任务吧。我也试过，一超时，全乱了，有 wait 的，有 stop 的，有 todo 的，有 bug 的，有 cancel 的， 我该做那个呢？新进入的任务怎么划分时间呢？
    
    我认为没有必要。前面说过，只做长任务，而每个任务都是需要几天，几个星期去完成的。但是不可能几天都重复只做那么一件事情。

    那么肯定是只有三种状态，

      - WAIT

        TODO 纯属脱下裤子放屁，todo 再衍生个 wait, STOP, 或者 cancel, 想想头都要晕了。 
        
        无非就一层意思，你想做某个任务，但是因为各种原因，你只能先占个位置，等待以后激活它，那就是 WAIT 了。
        
      - ACTIVITY

        激活状态，相当于进入队列，允许 3-5 任务进入队列，进入队列后，记录不同任务的使用时间，根据反馈信息，灵活的把时间段划分。

      - DONE
        
        完成状态

  - 起始时间与截止时间
    
    明确了上面的功能需求，那么截止时间和起始时间的滥用就少了。

    见过不少朋友，一天时间划 N 个起始时间，截止时间。然后超时后，越堆越多，或者出去弄点东西，都要设置个 STOP, 打个 note. 没必要。

    *起始时间和截止时间设置到了如何调度队列* ，高优先级任务，进入怎么

      - 截止时间的作用

        先介绍截止时间，是因为截止时间是日常最需要关注的，起始时间只有一种情况下会用到（下面说），

        这个很好理解，有时间要求就打上截止时间。没有时间要求的不要打呗，但是新任务加入的时候，就可以把截止时间长的，或者没有截止时间的替换掉。
    
      - 起始时间的作用

        起始时间只有一个作用，先思考下，为啥我们需要起始时间？我以前总是给自己的任务打上起始时间，但是我总觉得很有问题，分散的注意力。问题就出在，我们根本不需要起始时间，你想做那件事情，应该马上就可以开始做了。准备明天写个论文，写个项目，还打个 scheduled 提醒自己明天要做某事，纯属脱下裤子放屁。难道过了一夜就会忘记吗？

        所以，起始时间的作用，是有个任务要做，但是现在处于 activity 状态的任务太多了。为了不要一次性把所有任务激活为 activity 状态，从而导致自己什么都想做，什么都忙不过来，就要把这个任务延期。

        如果说，截止时间是，别人给你的要求，那么起始时间就是自己规划的，例如 12 月份要准备论文，截止时间是 1 月份。你可以现在就准备，但是你要考虑激活任务队列，是否有空位。如果没有。根据情况紧急或优先级，考虑是否把队列里面不太紧急的（例如没有截止时间）的取出来。如果队列的任务显示更加紧急，那你要考虑把论文延期，就是给它设计起始时间。

        这个起始时间的设置也有要求，要根据截止时间，如果截止时间是 1 月份，你是否有把握 15 天内写完，那么起始时间就可以为 12 月 15 号。同时，可以考虑激活任务的截止时间，是否 12 月 15 号前，里面会有 activity 任务完成，那么还可以把起始时间设置为 12 月 15 号之前，拥有更加充裕的时间。



