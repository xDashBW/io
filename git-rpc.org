* DONE 重构模块, 解决依赖关系
CLOSED: [2023-02-14 Tue 16:07]
- State "DONE"       from "STARTED"    [2023-02-14 Tue 16:07]
:LOGBOOK:
CLOCK: [2023-02-14 Tue 15:28]--[2023-02-14 Tue 16:07] =>  0:39
:END:

- [X] Eventloop 与 Base_poll

   Eventloop.h -> Base_poll.h <!-- <- Epoll.h

- [X] Socket 与 Eventloop

  从功能上来说, Socket 依赖 eventloop, 而为什么要隐藏 eventloop 的实现呢? 

- [X] Accept 和 socket 
  Accept 依赖 socket, 自然就依赖 eventloop 了.



* DONE Eventloop 三大模块 Socket, EventLoop, EPOll 的设计
CLOSED: [2023-02-17 Fri 23:51] DEADLINE: <2023-02-13 Mon>
- State "DONE"       from "DONE"       [2023-02-17 Fri 23:52]
- State "DONE"       from "DONE"       [2023-02-17 Fri 23:52]
- State "DONE"       from              [2023-02-17 Fri 23:51]
- State "DONE"       from "STARTED"    [2023-02-14 Tue 16:08]
- State "STARTED"    from "DONE"       [2023-02-14 Tue 14:36]
- State "DONE"       from "STARTED"    [2023-02-14 Tue 11:06]
:LOGBOOK:
CLOCK: [2023-02-14 Tue 09:59]--[2023-02-14 Tue 11:00] => -->  1:01
CLOCK: [2023-02-13 Mon 22:17]--[2023-02-13 Tue 23:58] =>  1:41
CLOCK: [2023-02-13 Mon 19:29]--[2023-02-13 Mon 20:22] =>  0:53
CLOCK: [2023-02-13 Mon 16:14]--[2023-02-13 Mon 16:45] =>  0:31
CLOCK: [2023-02-13 Mon 15:20]--[2023-02-13 Mon 16:10] =>  0:50
:END:
    
- [X] 模块设计
   
  - [X] Socket: 只关注网络事件, 那就直接一个 socket 就行了.  
    - [X] 用户设置事件: AddRead, AddWrite, DelRead, DelWrite
      - [X] 通过状态码判定是否 Add, Mod, Del 
      - [X] 然后直接调用 eventloop 实现上面的三个函数:add,mode,del 即可

  - [X] EventLoop: 与 io 复用后端的交互,
    - [X]  容器里面保管 socket, 然后把 socket 传给具体的 epoll 模块

  - [X] IO 复用后端
    - [X] 根据 eventloop 传进来的 socket 的 state() 判断 add,del??
    - [X] 唤醒后, 根据 loop 传入的 vector<socket*>, 把 fd 给他找到唤醒的 socket, 然后根据唤醒的事件设置 r_state. 给上层, 上层能够根据唤醒的 r_state 决定调用 read_cb 还是 write_cb



* TODO Acceptor 
- State "TODO"       from "DONE"       [2023-02-17 Fri 23:53]
- State "DONE"       from "STARTED"    [2023-02-14 Tue 21:22]
:LOGBOOK:
CLOCK: [2023-02-14 Tue 20:29]--[2023-02-14 Tue 21:22] =>  0:53
CLOCK: [2023-02-14 Tue 19:19]--[2023-02-14 Tue 20:22] =>  1:03
CLOCK: [2023-02-14 Tue 14:39]--[2023-02-14 Tue 15:28] =>  0:49
CLOCK: [2023-02-14 Tue 11:55]--[2023-02-14 Tue 12:14] =>  0:19
CLOCK: [2023-02-14 Tue 11:50]--[2023-02-14 Tue 11:51] =>  0:01
:END:

- [X] 职责:

   上层根据地址和 socket 绑定后, 将具体 socketfd 传给该模块的成员变量 socket 模块.

    主要是 Listen: 开启监听. 给 socket 模块添加读事件, 和添加读回调函数

    读回调是内部处理, 不需要经过用户, 唤醒后从 accpe_fd 读取新的文件 fd, 创建 Socket 对象, 为其添加读回到和读事件. 设置一系列玩意.

- [X] 构造与西沟: 
- [X] 回调参数
- [X] 然后 listen
  - [X] 接收 fd
  - [X] 从 fd 读取
- [X] 接收上层的两个回调



