# 不要忙着堆进度，要安排自己的强化训练
# 某数学家说：不做题，就不会不断地逼自己思考

* 日练
: 如果，有失败了，那么就失败了。一切按照进度进行。
: 例如，今天没有准时起床，那就没有把，记录原因，继续堆任务。如果 18:00 前没有吃饭，也不好吃了
** TASK [#C] 俯卧撑 100 个
SCHEDULED: <2022-12-11 Sun +2d> DEADLINE: <2022-12-11 Sun 12:00 +2d>
- State "DONE"       from "LOOP"       [2022-12-09 Fri 13:23]
:PROPERTIE:LAST_REPEAT: [2022-12-09 Fri 13:23]S:

:END:
- State "FAIL"       from "LOOP"       [2022-12-07 Wed 16:08] \\
  遗精
---------


** TASK [#C] 深吨 100 个
SCHEDULED: <2022-12-10 Sat +2d> DEADLINE: <2022-12-10 Sat 12:00 +2d>
:PROPERTIES:
:LAST_REPEAT: [2022-12-08 Thu 13:46]
:END:
- State "FAIL"       from "WAIT"       [2022-12-08 Thu 13:46] \\
  同上
---------


** TASK [#C] 跑步 4 公里
SCHEDULED: <2022-12-10 Sat +1d> DEADLINE: <2022-12-10 Sat 18:00 +1d>
:PROPERTIES:
:LAST_REPEAT: [2022-12-09 Fri 18:51]
:END:
- State "FAIL"       from "LOOP"       [2022-12-09 Fri 18:51] \\
  没有跑 4 公里, 才跑了几圈
  
  1. 没有提前准备
  2. 没有做好觉悟
- State "DONE"       from "TASK"       [2022-12-08 Thu 20:44]
:PROPERTIE:LAST_REPEAT: [2022-12-08 Thu 20:44]S:

:END:
- State "FAIL"       from "LOOP"       [2022-12-07 Wed 20:44] \\
  遗精
---------


** TASK [#C] 6 点钟起床
SCHEDULED: <2022-12-10 Sat +1d> DEADLINE: <2022-12-10 Sat 06:10 +1d>
:PROPERTIES:
:LAST_REPEAT: [2022-12-09 Fri 09:07]
:END:
- State "FAIL"       from "LOOP"       [2022-12-09 Fri 09:07] \\
  失败, 因为没有把手机藏好，早上闹钟一响就无意识的手机关了.
- State "FAIL"       from "TASK"       [2022-12-08 Thu 13:45] \\
  昨晚反思，这是第三阶段前的最后通牒
:PROPERTIE:LAST_REPEAT: [2022-12-08 Thu 13:45]S:

:END:
- State "FAIL"       from "WAIT"       [2022-12-07 Wed 10:23] \\
  遗精
---------


** TASK [#C] 6 点之前吃晚饭，最迟 6点半，否则不吃！！！
SCHEDULED: <2022-12-10 Sat +1d> DEADLINE: <2022-12-10 Sat 18:10 +1d>
:PROPERTIES:
:LAST_REPEAT: [2022-12-09 Fri 18:52]
:END:
- State "DONE"       from "LOOP"       [2022-12-09 Fri 18:52]
- State "DONE"       from "TASK"       [2022-12-08 Thu 20:44]
:PROPERTIE:LAST_REPEAT: [2022-12-08 Thu 20:44]S:

:END:
- State "DONE"       from "LOOP"       [2022-12-07 Wed 16:09]
---------


* 月练 
** LOOP [#C] 模仿 libevent 写一个网络库，导给 py 使用
DEADLINE: <2022-12-14 Fri> SCHEDULED: <2022-12-01 Thu>
:LOGBOOK:
CLOCK: [2022-12-07 Wed 21:09]--[2022-12-07 Wed 22:21] =>  1:12
CLOCK: [2022-12-07 Wed 18:30]--[2022-12-07 Wed 20:00] =>  1:30
CLOCK: [2022-12-07 Wed 16:10]--[2022-12-07 Wed 17:00] =>  0:50
CLOCK: [2022-12-07 Wed 11:50]--[2022-12-07 Wed 13:12] =>  1:22
CLOCK: [2022-12-07 Wed 10:20]--[2022-12-07 Wed 11:36] =>  1:16
:END:
- [X] 方法论

  以前我都是看别人写，其实去揣测别人的写法效率是有点低的。

  应该了解核心，然后自己写这个核心，遇到不懂的问题，再去看。

- [X] 原理：单线程

    - [X] 底层是 io 复用接口 / 唤醒接口 的 LOOP 

    - [X] 网络事件

        - [X] 用户注册读事件和写事件

    - [X] 几个调度队列
      
      LOOP 就是调度队列的 Event 挪来挪去。

      注册的进入注册队列，然后 epoll 返回后，如果 epoll io 复用读，写唤醒，则放入唤醒队列，统一处理。

      （所以，reactor 也是线性处理的，而非并行处理，只是不会阻塞网络，如果要执行耗时任务，会阻塞其他 socket）

      然后执行玩，根据一次性还是多次，重新放入调度队列

        - [X] 注册队列

        - [X] 唤醒队列

    - [X] Buffer 缓存

      给每个 socket 一个 buffer，当数据到达时，网络库复杂 read，防止上层应用阻塞，对于用户来说，使得’就绪态‘变成’完成态‘
      
- [-] 代码组织
    - [-] 基础库

        - [X] queue

        - [ ] 定时轮

        - [ ] 最小堆

    - [X] 模块通信 flag
        - [X] event_dispatch_queue: wait/actvite

    - [-] 事件
        - [-] 接口
            - [X] event_init ()
            - [X] event_add()
            - [ ] event_del()
                - [ ] FIXME
                    - [ ] 如果事件处于激活队列中，可以直接删除吗？
        - [X] 桥梁功能

          用户注册 -> event -> epoll -> 反馈给用户，Event 如何充当这个桥梁的作用？

            - [X]  唤醒时反馈给用户必要的信息 -> 回调函数接口设置

              先不要考虑用户从 buffer 拿数据，就考虑唤醒用户

            - [X] 用户注册  ：一个 socket 可以注册读，写两个 event 

              假设你是用户，我要给某个 socket 注册唤醒读事件，或写事件。

              那么需要设置 Event，并且设置属性

                - [X] socket fd 
                - [X] callback：(int fd, short ev, void *args);
                - [X] short ，你想要监控的事件，通过 内置宏提供给你设置。

                一个事件定好了，没有改变的必要吧

    - [X] event_dispatch
        - [X] 接口
            - [X] event_dispatch_init
            - [X] event_dispatch_queue_add
            - [X] event_dispatch_queue_del
            - [X] event_dispatch_loop()
          
        - [X] 队列（事件）管理和统一 dispatch （调度，分发）

    - [-] io 复用后端 epoll / select / poll / kqueue 
        - [ ] 接口
            - [ ] epoll_new()
                - [ ] Fixme
                    - [ ] why _new rather than _init
            - [ ] epoll_add()
            - [ ] epoll_del()
            - [ ] epoll_dispatch()
              
        - [X] 封装 epoll_ctl(EPOLL_CTL_ALL)

          检测其余同一个 socket 的其他 event 是否存在，以设置 epoll_ctl 不同参数
          
            - [X] 该 socket 新 event， 则 socketfd 添加进红黑树（监控该socket）
            - [X] 修改，例如该 socket 从读变成写或者增加写事件，那直接修改就好了，删除后在加入是画蛇添足
            - [X] 从红黑树删除这个 socket = 不再监控该 socket

    - [ ] 事件的生命周期

        - [ ] 如果该 event 主动 free（），则是否调用 event_del

            - [ ] 如果该 event 本来就没有加入调度队列？

            - [ ] 

--------------------------------------


* 超人计划
** 第一阶段：摸清其思路
*** TASK [#C] Http server （支持 get/post/cgi），用浏览器访问，里面有个 cgi 留言板


*** TASK [#C] 实现一个简易的 redis, 或者给 redis 添加 10 条命令，或者把存储引擎换成 unqlite


*** TASK [#C] 给 apache 实现一个 module, 可以支持 lua 写服务 


*** TASK [#C] 给 nginx 添加 python 模块，可以用 python 写服务


*** TASK [#C] 用 c/c++/go 写一个代理翻墙软件，跑在海外租的 vps 上


*** TASK [#C] 实现简单的 tcp RPC 框架，并且在这个基础上做一个简单聊天


*** TASK [#C] 阅读 Linux 代码，应用层实现一个 Linux 的定时器
