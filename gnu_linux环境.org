* STARTED 考慮最小集合開發工具
:LOGBOOK:
CLOCK: [2023-02-18 Sat 22:26]--[2023-02-18 Sat 23:41] =>  1:15
:END:

現在先把 debian 裝上. 裝上沒用用, 還是裸奔, 要要學會接受痛苦, 痛苦, 戰鬥.

你知道你的思維出現什麼問題嗎? 

void, 開發工具裝好. 
因爲我是開着加速器的, 所以我不考慮國內源的問題.

- [ ] 快捷鍵, 我確實是使用內置的 
- [ ] 陳斌的配置很不錯, 專門爲終端打造, 而且他的觀點, 和我的很符合. 
- [ ] glibc
- [ ] Ctags
- [ ] Global
- [ ] glibc

不用設置代碼裏
應該挺好的，因爲陳斌的配置確實挺好的. 

這叫做基於快捷鍵的兩種思路
先安裝 emacs 之前要保證能把 glibc 跑起來, 你要學會在 gcc, 這樣夠嗎? 

使用 apt 搜索軟件包, 我們可以看到 gcc 不是自帶的, 那麼 vim 是怎麼編譯出來的??

猜測, 不可能從源碼編譯吧. 肯定是定製好的二進制包, 中途詢問你軟件源, 也就是下包的意思...

- [ ] 先裝 glibc
怎麼做
現在的問題是, 要克服你的心裏恐懼, 你才能變得更強. 你才能變得更強.  

* STARTED 學會使用 apt/pacman 工具剖析
:LOGBOOK:
CLOCK: [2023-02-18 Sat 23:41]--[2023-02-19 Sun 00:48] =>  1:07
:END:
- [ ] 好了 
- [ ] 所以我要解決一切, 我要把陳斌的代碼搞定.


* STARTED Emacs 
:LOGBOOK:
CLOCK: [2023-02-19 Sun 00:49]--[2023-02-19 Sun 02:17] =>  1:28
:END:
- [X] 学习方法: 陳斌一年
  - [X] 联系实际, 由点到面 : 例如我需要一個 gtk 軟件, 而不是为了学而学
  - [X] 不要纠结快捷键或各种细小的东西, 使用历经考验官方快捷键也没事 . 
  - [X] 所以最快的方式就是直接从高手的配置用起, 节约时间
  - [X] 看懂高手配置是关键是 wiki 和联系作者. 
  - [X] 然后根据需要定制自己的需求
  - [X] 进步的方法是给高手报 bug.
  - [X] 最好的教材:  Wiki 

- [-] Lisp
  - [X] 封装
    - [X] 函数
    - [X] 代码片段: 可以嵌入函数. 或直接放在全局范围, 直接执行. 
      - [X] S 表达式
      - [X] 组合 s 表达式 
      - [X] Let : 可以封装私有变量, 5 分钟入门里面提到可以替代 progn 
      - [X] Progn 

  - [ ] 基本逻辑结构
    - [ ] 判断
      - [ ] 数字
      - [ ] 字符串
    - [ ] while
    - [ ] for

  - [ ] 内置数据结构: 如同 vimscript 有列表和哈希, C 语言有数组和指针(手写各种链式结构的基础)
    - [ ] List
    
  - [X] 标准库 or runtime ()
    - [X] 用户 io : 与 c 实现, elisp 函数供给调用
      - [X] Read_from_minibuffer
      - [X] insert
      - [X] message
      - [X] format 格式化 

* TODO Grep 与正则表达式